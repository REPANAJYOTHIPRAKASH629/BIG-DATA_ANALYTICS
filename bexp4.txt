import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class StopWordElimination {

    public static class StopWordMapper extends Mapper<LongWritable, Text, Text, Text> {

        private Set<String> stopWords = new HashSet<>();

        @Override
        protected void setup(Context context) throws IOException, InterruptedException {
            // Load stop words from the file
            try (BufferedReader br = new BufferedReader(new FileReader("stopwords.txt"))) {
                String line;
                while ((line = br.readLine()) != null) {
                    stopWords.add(line.trim());
                }
            }
        }

        @Override
        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            // Split the sentence into words
            String[] words = value.toString().split("\\s+");
            StringBuilder output = new StringBuilder();
            // Filter out stop words
            for (String word : words) {
                if (!stopWords.contains(word.toLowerCase())) {
                    output.append(word).append(" ");
                }
            }
            context.write(new Text(output.toString().trim()), new Text());
        }
    }

    public static class StopWordReducer extends Reducer<Text, Text, Text, Text> {

        @Override
        protected void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
            // Output the sentence without stop words
            context.write(key, new Text());
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Stop Word Elimination");
        job.setJarByClass(StopWordElimination.class);
        job.setMapperClass(StopWordMapper.class);
        job.setReducerClass(StopWordReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}